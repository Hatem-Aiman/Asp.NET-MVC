// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2.Data;


#nullable disable

namespace WebApplication2.Migrations
{
    [DbContext(typeof(TestdbContext))]
    partial class TestdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication2.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("city_name");

                    b.Property<string>("Country")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("country");

                    b.HasKey("CityId")
                        .HasName("PK__city__031491A896834912");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("last_name");

                    b.Property<int?>("Phone")
                        .HasColumnType("int")
                        .HasColumnName("phone");

                    b.HasKey("CustomerId")
                        .HasName("PK__customer__CD65CB8540B8FE0C");

                    b.HasIndex("CityId");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("driver_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<string>("DriverName")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("driver_name")
                        .IsFixedLength();

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("vehicle_id");

                    b.HasKey("DriverId")
                        .HasName("PK_Drivers");

                    b.HasIndex("VehicleId");

                    b.ToTable("driver", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Notstudent", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("JoinDate")
                        .HasColumnType("date")
                        .HasColumnName("join_date");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.ToTable("notstudent", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Ride", b =>
                {
                    b.Property<int>("RideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ride_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RideId"));

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("driver_id");

                    b.Property<int?>("EndCity")
                        .HasColumnType("int")
                        .HasColumnName("end_city");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<int?>("StartCity")
                        .HasColumnType("int")
                        .HasColumnName("start_city");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("vehicle_id");

                    b.HasKey("RideId")
                        .HasName("PK__Rides__C5B8C4F48EEB3DD3");

                    b.HasIndex("DriverId");

                    b.HasIndex("EndCity");

                    b.HasIndex("StartCity");

                    b.HasIndex("VehicleId");

                    b.ToTable("ride", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int>("RideId")
                        .HasColumnType("int")
                        .HasColumnName("ride_id");

                    b.HasKey("TicketId")
                        .HasName("PK_Tickets");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RideId");

                    b.ToTable("ticket", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vehicle_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("driver_id");

                    b.Property<int?>("Seat")
                        .HasColumnType("int")
                        .HasColumnName("seat");

                    b.Property<int?>("TopSpeed")
                        .HasColumnType("int")
                        .HasColumnName("top_speed");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("vehicle_type");

                    b.HasKey("VehicleId")
                        .HasName("PK__Vehicles__476B54923333A483");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Customer", b =>
                {
                    b.HasOne("WebApplication2.Models.City", "City")
                        .WithMany("Customers")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__customer__city_i__412EB0B6");

                    b.Navigation("City");
                });

            modelBuilder.Entity("WebApplication2.Models.Driver", b =>
                {
                    b.HasOne("WebApplication2.Models.Vehicle", "Vehicle")
                        .WithMany("Drivers")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("FK_driver_vehicle");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("WebApplication2.Models.Ride", b =>
                {
                    b.HasOne("WebApplication2.Models.Driver", "Driver")
                        .WithMany("Rides")
                        .HasForeignKey("DriverId")
                        .IsRequired()
                        .HasConstraintName("FK_ride_driver");

                    b.HasOne("WebApplication2.Models.City", "EndCityNavigation")
                        .WithMany("RideEndCityNavigations")
                        .HasForeignKey("EndCity")
                        .HasConstraintName("FK__Rides__End_City__3F466844");

                    b.HasOne("WebApplication2.Models.City", "StartCityNavigation")
                        .WithMany("RideStartCityNavigations")
                        .HasForeignKey("StartCity")
                        .HasConstraintName("FK__Rides__Start_Cit__3E52440B");

                    b.HasOne("WebApplication2.Models.Vehicle", "Vehicle")
                        .WithMany("Rides")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("FK_Rides_Vehicles");

                    b.Navigation("Driver");

                    b.Navigation("EndCityNavigation");

                    b.Navigation("StartCityNavigation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("WebApplication2.Models.Ticket", b =>
                {
                    b.HasOne("WebApplication2.Models.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_customers");

                    b.HasOne("WebApplication2.Models.Ride", "Ride")
                        .WithMany("Tickets")
                        .HasForeignKey("RideId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_Rides");

                    b.Navigation("Customer");

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("WebApplication2.Models.City", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("RideEndCityNavigations");

                    b.Navigation("RideStartCityNavigations");
                });

            modelBuilder.Entity("WebApplication2.Models.Customer", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("WebApplication2.Models.Driver", b =>
                {
                    b.Navigation("Rides");
                });

            modelBuilder.Entity("WebApplication2.Models.Ride", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("WebApplication2.Models.Vehicle", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Rides");
                });
#pragma warning restore 612, 618
        }
    }
}
